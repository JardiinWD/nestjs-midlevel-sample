// ======== IMPORTS =========
import { faker } from '@faker-js/faker';
import * as dotenv from 'dotenv';
dotenv.config();
// ======== ENTITIES =========
import { EntityManager } from "typeorm";
import { PostEntity, UserEntity } from "@entities/index";
import { Roles } from '@entities/user.entity';


export class Seed {
    constructor(private readonly entityManager: EntityManager) { }

    /** A method to seed fake data based on the specified entity.
     * @param {any} entity - The entity for which to seed fake data.
     * @return {void} No return value.
     */
    seedFakeData<T>(entity: any): void {
        // 1. Define a switch case for different entities
        switch (entity) {
            // 2. Add case for UserEntity
            case UserEntity:
                // 2.1 Call the userData method
                this.addData(this.userData(), UserEntity);
                break;
            default:
                break;
        }
    }

    /** Generates an array of partial UserEntity objects based on the SEED_NUMBER environment variable or 100 if not set.
     * This method creates fake user data by generating random email addresses, names, roles, and about descriptions.
     * The number of user data objects generated is determined by the SEED_NUMBER environment variable, defaulting to 100.
     *
     * @private
     * @returns {Array<Partial<UserEntity>>} An array of partial UserEntity objects representing fake user data.
     * @param {string} email: A random email address generated by the faker library.
     * @param {string} name: A random first name and last name generated by the faker library, separated by a space.
     * @param {Roles} role: A random role from the Roles enum, either 'user' or 'admin'.
     * @param {string} about: A random sentence generated by the faker library.
     */
    private userData(): Array<Partial<UserEntity>> {
        return Array.from({ length: +process.env.SEED_NUMBER || 100 }).map<Partial<UserEntity>>(() => {
            return {
                email: faker.internet.email(),
                name: `${faker.name.firstName()} ${faker.name.lastName()}`,
                role: faker.helpers.arrayElement([Roles.user, Roles.admin]),
                about: faker.lorem.sentence()
            }
        })
    }

    /** Save an object in the database to create fake datas
     * @param {Array<Partial<T>>} data - The data to be saved in the database
     * @param {any} entity - The entity to save the data for
     * @return {void} No return value
     */
    private addData<T>(data: Array<Partial<T>>, entity: any): void {
        // Save an object in the database to create fake datas
        this.entityManager.save<T, T>(entity, data as any)
            .then((savedData: Array<Partial<T>>) => console.log(savedData))
            .catch((err) => console.log("Error generating fake data: ", err))
    }
}